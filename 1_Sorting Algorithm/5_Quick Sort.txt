#include <bits/stdc++.h>
using namespace std;

int partition(int arr[], int s, int e)
{
	// assume first index position is pivot
	int pivot = arr[s];

	// count element <= pivot
	int count = 0;
	for(int i=s+1; i<=e; i++)
		if(arr[i] <= pivot) count++;

	// swap right index position for pivot
	int pivotIndex = s + count;
	swap(arr[s], arr[pivotIndex]);

	// left part elements of pivot become smaller and 
	// right part elements of pivot become greater
	int i=s, j=e;

	while(i < pivotIndex && j > pivotIndex)
	{
		// already small then increment
		while(arr[i] <= pivot) i++;
		// already big then decrement
		while(arr[j] > pivot) j--;

		if(i < pivotIndex && j > pivotIndex)
			swap(arr[i++], arr[j--]);
		
	}
	
	return pivotIndex;
}


void quickSort(int arr[], int s, int e)
{
	// Base Case
	if( s >= e) return;

	// partition or find pivot
	int p = partition(arr, s, e);

	// sort left part
	quickSort(arr, s, p-1);
	// sort right part
	quickSort(arr, p+1, e);
}

int main() {

	int arr[] = {5, 2, 6, 1, 9, 4};
	int n = 6;

	quickSort(arr, 0, n-1);

	for(int i=0; i<n; i++)
		cout << arr[i] << " ";
	cout << endl;
}

