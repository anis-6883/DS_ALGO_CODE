#include<bits/stdc++.h>
using namespace std;

void addEdge(vector<int> [], int, int);
void bfsTraverse(vector<int> [], int);

int main()
{
    int n;
    cout<<"How Many Nodes: ";
    cin>>n;
    vector<int> adj[n];
    int edge;
    cout<<"How many Edges: ";
    cin>>edge;
    for(int i=0; i<edge; i++)
    {
        cout<<"Input the nodes that are connected: ";
        int a,b;
        cin>>a>>b;
        addEdge(adj,a,b);
    }
    bfsTraverse(adj, n);

    return 0;
}

void addEdge(vector<int> adj[], int a, int b)
{
    adj[a].push_back(b);
    adj[b].push_back(a);
}

void bfsTraverse(vector<int> adj[], int n)
{
    vector<int> visited(n, 0);

    // it also works for disconnected graph
    for(int i=0; i<n; i++){

        if(!visited[i]){

            queue<int> q;
            q.push(i);
            visited[i] = 1;

            while(!q.empty())
            {
                int f = q.front();
                q.pop();
                cout<<f<<" ";

                for(auto x: adj[f])
                {
                    if(visited[x]==0)
                    {
                        q.push(x);
                        visited[x]=1;
                    }
                }
            }
        }
    }
    
}
