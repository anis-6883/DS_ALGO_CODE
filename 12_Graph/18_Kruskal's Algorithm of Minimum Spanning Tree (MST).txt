#include <bits/stdc++.h>
using namespace std;

struct node {
    int u, v, wt;

    node(int first, int second, int weight){
        u = first;
        v = second;
        wt = weight;
    }
};

bool comp(node a, node b){
    return a.wt < b.wt;
}

int findParent(int node, vector<int>&parent){
    if(node == parent[node]){
        return node;
    }
    return parent[node] = findParent(parent[node], parent);
}

void unionSet(int u, int v, vector<int>&parent, vector<int>&rank){
    u = findParent(u, parent);
    v = findParent(v, parent);
    if(rank[u] < rank[v]) {
    	parent[u] = v;
    }
    else if(rank[v] < rank[u]) {
    	parent[v] = u; 
    }
    else {
    	parent[v] = u;
    	rank[u]++; 
    }
}

int main(){
    int n, edge;
    cout << "How Many Nodes: ";
    cin >> n;
    cout << "How many Edges: ";
    cin >> edge;

    vector<node> edges;

    for(int i=0; i<edge; i++){
        cout << "Input the nodes and weight: ";
        int a, b, wt;
        cin >> a >> b >> wt;
        edges.push_back(node(a, b, wt));
    }

    sort(edges.begin(), edges.end(), comp);

    vector<int> parent(n);
    vector<int> rank(n);

    for(int i=0; i<n; i++){
        parent[i] = i;
        rank[i] = 0;
    }

    int cost = 0;

    vector<pair<int, int>> mst;

    for(auto it: edges){
        if(findParent(it.v, parent) != findParent(it.u, parent)) {
	        cost += it.wt; 
	        mst.push_back({it.u, it.v}); 
	        unionSet(it.u, it.v, parent, rank); 
	    }
    }

    // cout << cost << endl;

	for(auto it : mst) 
        cout << it.first << " - " << it.second << endl; 
	return 0;
}