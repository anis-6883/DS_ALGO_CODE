#include <iostream>
#include <vector>
#include <utility>
#include <queue>
using namespace std;

void addEdge(vector<int> [], int, int);
bool checkForCycle(vector<int>[], int, int, vector<int>&);

int main()
{
    int n;
    cout<<"How Many Nodes: ";
    cin>>n;
    vector<int> adj[n];
    int edge;
    cout<<"How many Edges: ";
    cin>>edge;
    for(int i=0; i<edge; i++)
    {
        cout<<"Input the nodes that are connected: ";
        int a,b;
        cin>>a>>b;
        addEdge(adj,a,b);
    }

    int src;
    cout<<"Enter the source node: ";
    cin>>src;

    vector<int> visited(n, 0);

    checkForCycle(adj, src, -1, visited) ? 
        cout << "Cycle is Present" << endl :
        cout << "Cycle is not Present" << endl;
    return 0;
}

void addEdge(vector<int> adj[], int a, int b)
{
    adj[a].push_back(b);
    adj[b].push_back(a);
}

bool checkForCycle(vector<int> adj[], int src, int parent, vector<int>&visited){
    visited[src] = 1;
    for(auto x: adj[src]){
        if(!visited[x]){
            if(checkForCycle(adj, x, src, visited)) return true;
        }else{
            if(x != parent) return true;
        }
    }
    return false;
}