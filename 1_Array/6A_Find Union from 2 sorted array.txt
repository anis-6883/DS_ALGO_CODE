// There are 3 case to solve this problem
// 1. Array size is equal
// 2. Array size is not equal
// 3. Duplicate element in one or both arrays

#include <iostream>
#include <vector>
#include <set>
#include <algorithm>

using namespace std;

int findUnion(int [], int [], int, int);
int findUnion2(int [], int [], int, int);

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n,m;
        cin>>n>>m;
        int arr1[n], arr2[m];
        for(int i=0; i<n; i++)
            cin>>arr1[i];
        for(int j=0; j<m; j++)
            cin>>arr2[j];

        sort(arr1,arr1+n);
        sort(arr2, arr2+m);

        // int counter = findUnion(arr1, arr2, n, m);
        int counter = findUnion2(arr1, arr2, n, m);
        cout<<counter<<endl;
    }
    return 0;
}

int findUnion(int arr1[], int arr2[], int n, int m)
{
    int i=0, j=0;
    vector<int> vec;

    while(i<n && j<m)
    {
        // skip the duplicate elements
        while( (i<n-1) && (arr1[i]==arr1[i+1]) )
        {
            i++;
        }
        while( (j<m-1) && (arr2[j]==arr2[j+1]) )
        {
            j++;
        }


        if(arr1[i]<arr2[j])
        {
            vec.push_back(arr1[i]);
            i++;
        }
        else if(arr1[i]>arr2[j])
        {
            vec.push_back(arr2[j]);
            j++;
        }
        else
        {
            vec.push_back(arr1[i]);
            i++;
            j++;
        }
    }

    while(i<n)
    {
        // skip the duplicate elements
        if( (i<n-1) && (arr1[i]==arr1[i+1]) )
        {
            i++;
        }
        else
        {
            vec.push_back(arr1[i]);
            i++;
        }
    }

    while(j<m)
    {
        // skip the duplicate elements
        if( ( (j<m-1) && (arr2[j]==arr2[j+1]) ) )
        {
            j++;
        }
        else
        {
            vec.push_back(arr2[j]);
            j++;
        }
    }

    return vec.size();
}

int findUnion2(int arr1[], int arr2[], int n, int m)
{
    int i=0, j=0;
    set<int> unionSet; //No duplicate and default sorted

    while(i<n && j<m)
    {
        if(arr1[i] < arr2[j])
            unionSet.insert(arr1[i++]);
        else if(arr1[i] > arr2[j])
            unionSet.insert(arr2[j++]);
        else
        {
            unionSet.insert(arr2[j++]);
            i++;
        }
    }
    while(i<n)
    {
        unionSet.insert(arr1[i++]);
    }
    while(j<m)
    {
        unionSet.insert(arr2[j++]);
    }
    return unionSet.size();
}

