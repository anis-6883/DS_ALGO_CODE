#include <iostream>
#include <queue>
#include <stack>
using namespace std;

struct Node
{
    Node* left;
    int data;
    Node* right;

    Node(int value){
        data = value;
        left = NULL;
        right = NULL;
    }
};
void reverseLevelOrderTraverse(Node*);

int main()
{
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    root->left->right->left = new Node(6);
    root->right->left = new Node(7);
    root->right->right = new Node(8);
    root->right->right->left = new Node(9);
    root->right->right->right = new Node(10);

    cout << "Reverse-Level-Order Traverse: ";
    reverseLevelOrderTraverse(root);
    cout << endl;
    return 0;
}

void reverseLevelOrderTraverse(Node* root){
    queue<Node*> q;
    stack<int> stk;
    q.push(root);

    while(!q.empty()){
        Node* temp = q.front();
        stk.push(temp->data);
        q.pop();

        if(temp->left) q.push(temp->left);
        if(temp->right) q.push(temp->right);
    }

    while(!stk.empty()){
        int top = stk.top();
        cout << top << " ";
        stk.pop();
    }
    cout << endl;
}