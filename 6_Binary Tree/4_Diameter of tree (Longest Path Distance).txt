#include <iostream>
using namespace std;

struct Node
{
    Node* left;
    int data;
    Node* right;

    Node(int value){
        data = value;
        left = NULL;
        right = NULL;
    }
};
int diameterOfNodes(Node*, int&);

int main()
{
    // tree 1
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    root->left->right->left = new Node(6);
    root->right->left = new Node(7);
    root->right->right = new Node(8);
    root->right->right->left = new Node(9);
    root->right->right->right = new Node(10);

    // tree 2
    // Node* root = new Node(1);
    // root->left = new Node(2);
    // root->left->left = new Node(3);
    // root->left->left->left = new Node(9);
    // root->right = new Node(4);
    // root->right->left = new Node(5);
    // root->right->right = new Node(6);
    // root->right->right->right = new Node(7);
    // root->right->right->right->right = new Node(8);

    int maxi = 0;
    diameterOfNodes(root, maxi);
    cout << maxi << endl;
    return 0;
}

int diameterOfNodes(Node* root, int& maxi){

    if(!root) return 0;

    int lh = diameterOfNodes(root->left, maxi);
    int rh = diameterOfNodes(root->right, maxi);
    maxi = max(maxi, lh+rh);

    return 1 + max(lh, rh);
}
