#include <iostream>
#include <queue>
#include <vector>
#include <stack>
using namespace std;

struct Node
{
    Node* left;
    int data;
    Node* right;

    Node(int value){
        data = value;
        left = NULL;
        right = NULL;
    }
};
void preOrderTraverse(Node*);
void inOrderTraverse(Node*);
void postOrderTraverse(Node*);

int main()
{
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->left->left = new Node(4);
    root->left->right = new Node(5);
    root->left->right->left = new Node(6);
    root->right->left = new Node(7);
    root->right->right = new Node(8);
    root->right->right->left = new Node(9);
    root->right->right->right = new Node(10);

    cout << "Pre-Order Traverse: ";
    preOrderTraverse(root);
    cout << endl;
    cout << "In-Order Traverse: ";
    inOrderTraverse(root);
    cout << endl;
    cout << "Post-Order Traverse: ";
    postOrderTraverse(root);
    cout << endl;
    return 0;
}

void preOrderTraverse(Node* root){
    if(root == NULL) return;

    stack<Node*> stk;
    stk.push(root);

    while(!stk.empty()){

        Node* curr = stk.top();
        cout << curr->data << " ";
        stk.pop();

        if(curr->right) stk.push(curr->right);
        if(curr->left) stk.push(curr->left);
    }

    // cout << root->data << " ";
    // preOrderTraverse(root->left);
    // preOrderTraverse(root->right);
}

void inOrderTraverse(Node* root){
    if(root == NULL) return;

    stack<Node*> stk;
    Node* curr = root;

    while(!stk.empty() || curr != NULL){

        if(curr != NULL){
            stk.push(curr);
            curr = curr->left;
        }
        else{
            curr = stk.top();
            stk.pop();
            cout << curr->data << " ";
            curr = curr->right;
        }
    }

    // inOrderTraverse(root->left);
    // cout << root->data << " ";
    // inOrderTraverse(root->right);
}

void postOrderTraverse(Node* root){
    if(root == NULL) return;

    stack<Node*> stk;
    stack<int> stk2;
    stk.push(root);

    while(!stk.empty()){

        Node* curr = stk.top();
        stk2.push(curr->data);
        stk.pop();

        if(curr->left) stk.push(curr->left);
        if(curr->right) stk.push(curr->right);
    }

    while(!stk2.empty()){
        int top = stk2.top();
        cout << top << " ";
        stk2.pop();
    }

    // postOrderTraverse(root->left);
    // postOrderTraverse(root->right);
    // cout << root->data << " ";
}