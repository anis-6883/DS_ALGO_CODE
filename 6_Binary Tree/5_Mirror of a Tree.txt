#include <iostream>
#include <queue>
using namespace std;

struct Node
{
    Node* left;
    int data;
    Node* right;

    Node(int value){
        data = value;
        left = NULL;
        right = NULL;
    }
};
Node* mirrorify(Node*);
void levelOrderTraverse(Node*);

int main()
{
    // tree 1
    // Node* root = new Node(1);
    // root->left = new Node(2);
    // root->right = new Node(3);
    // root->left->left = new Node(4);
    // root->left->right = new Node(5);
    // root->left->right->left = new Node(6);
    // root->right->left = new Node(7);
    // root->right->right = new Node(8);
    // root->right->right->left = new Node(9);
    // root->right->right->right = new Node(10);

    // tree 2
    Node* root = new Node(1);
    root->left = new Node(2);
    root->left->left = new Node(3);
    root->left->left->left = new Node(9);
    root->right = new Node(4);
    root->right->left = new Node(5);
    root->right->right = new Node(6);
    root->right->right->right = new Node(7);
    root->right->right->right->right = new Node(8);

    levelOrderTraverse(root);
    cout << endl;
    root = mirrorify(root);
    levelOrderTraverse(root);
    cout << endl;
    return 0;
}

Node* mirrorify(Node* root){

    if(!root) return root;
    // Node* temp;
    // temp = root->left;
    // root->left = root->right;
    // root->right = temp;
    swap(root->left, root->right);

    if(root->left) mirrorify(root->left);
    if(root->right) mirrorify(root->right);

    return root;
}

void levelOrderTraverse(Node* root){

    if(!root) return;

    queue<Node*> q;
    q.push(root);

    while(!q.empty()){
        Node* temp;
        temp = q.front();
        q.pop();
        cout << temp->data << " ";

        if(temp->left) q.push(temp->left);
        if(temp->right) q.push(temp->right);
    }
}


